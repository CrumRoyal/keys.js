{"name":"Keys.js","tagline":"Easy keybindings for browser applications!","body":"# Keys.js\r\n\r\nThis project spawned out of a Chrome extension I was working on where I kept handling more and more key combinations for shortcut actions, until it eventually became an unmaintainable rats nest. Obviously I needed a solution, and Keys.js was born.\r\n\r\n## Current State\r\n\r\nStable, but it's a new project, so as always, caveat emptor. The documentation is very close to comprehensive, but some work needs to be done. The test suite is comprehensive, and very few gaps are left to fill there that are meaningful. Please help me identify any gaps in functionality, testing, or docs, by submitting issues so that I can prioritize things as needed.\r\n\r\n## Usage\r\n\r\nThis library is intended for use in the browser, but offers support for any CommonJS or AMD module loaders, such as require.js, etc.\r\n\r\n## External Dependencies\r\n\r\nNone. I wanted to ensure that Keys could stand on it's own, independent of any third party libraries. This makes it really easy to deploy on an existing project.\r\n\r\n## Architecture\r\n\r\nKeys is composed of three classes that function a bit like a pyramid, starting with the smallest unit (Key) up to a document-wide event manager (Bindings).\r\n\r\n#### Key\r\n\r\nThis class manages information about a single physical key on the keyboard. One can reference a given key instance using `Key.A` or `Key['Num Lock']`. There is little need to actually create new instances of Key as all of the keys on the keyboard already have static instances defined.\r\n\r\n#### Combo\r\n\r\nThis class manages information about a combination of physical keys on the keyboard. Specifically, one physical key of any type, and any combination of the meta keys (SHIFT, ALT, META, etc). Combos are where we match the keys pressed in a keypress event to the keys required in Combos we wish to execute behavior against (as managed by the Bindings class).\r\n\r\nYou can create Combos easily using one of the following variations:\r\n\r\n```javascript\r\n// Single meta key\r\nvar combo = new Combo(Key.A, Key.CTRL);\r\n// Multiple meta keys, constructor called as a variadic function\r\nvar combo = new Combo(Key.A, Key.CTRL, Key.SHIFT);\r\n// Multiple meta keys passed as an array\r\nvar combo = new Combo(Key.A, [ Key.CTRL, Key.SHIFT ]);\r\n```\r\n\r\n#### Bindings\r\n\r\nThis class manages the mapping of behavior to Combos. It intercepts keydown/keyup document-wide, creates a Combo from the keypress event, matches that Combo against the set of configured keybindings (instances of Combo), and if a match is found, executes any handlers for that Combo and event type (you can have distinct handlers for keydown/keyup). **Note:** You should only ever have one instance of Bindings on the page, or you will encounter duplication/dropping of events.\r\n\r\nBindings offers a simple API for taking Combos and binding behavior to them. First, you use `add` to create a keybinding:\r\n\r\n```javascript\r\nvar bindings = new Bindings();\r\nbindings.add('displayAlert', new Combo(Key.A, [ Key.CTRL, Key.SHIFT ]));\r\nbindings.add('toggle', new Combo(Key.A, [ Key.CTRL, Key.META ]));\r\n```\r\n\r\nAfter you've added your keybindings, you can register a handler using `registerHandler`. You can register multiple handlers for a single event, they will all be executed.\r\n\r\n```javascript\r\nbindings.registerHandler('displayAlert', function() { alert('Hello!'); });\r\n```\r\n\r\nIf you have toggle-like behavior you'd like to implement, you are in luck! Register your toggle using `registerToggle`:\r\n\r\n```javascript\r\nvar toggleOn = function() { console.log('Lights on!'); };\r\nvar toggleOff = function() { console.log('Lights off!'); };\r\nbindings.registerToggle('toggle', toggleOn, toggleOff);\r\n```\r\n\r\n**Note:** The toggle starts in the off position.\r\n\r\n\r\n\r\n## Full Example\r\n\r\n```html\r\n<html>\r\n<body>\r\n    <div class=\"wrapper\">\r\n        <input type=\"text\" id=\"test\" placeholder=\"Test input..\" />\r\n    </div>\r\n    <script type=\"text/javascript\" src=\"../src/keys.js\"></script>\r\n    <script type=\"text/javascript\">\r\n        (function() {\r\n            // Toggle Flag\r\n        \tvar toggled = false;\r\n\r\n            // Initialize application-wide bindings manager\r\n        \tvar bindings = window.bindings = new Bindings();\r\n\r\n            // Add keybindings\r\n        \tbindings.add('displayAlert',   new Combo(Key.A, [ Key.CTRL, Key.SHIFT ]));\r\n        \tbindings.add('toggleFlag',     new Combo(Key.C, [ Key.SHIFT, Key.META ]));\r\n            bindings.add('highlightInput', new Combo(Key.SHIFT, Key.META));\r\n\r\n            // Register displayAlert handler\r\n        \tbindings.registerHandler('displayAlert', function() { alert('Hello!'); });\r\n\r\n            // Register toggleFlag toggle\r\n        \tvar toggleOn  = function() { toggled = true; console.log(toggled); };\r\n        \tvar toggleOff = function() { toggled = false; console.log(toggled); };\r\n        \tbindings.registerToggle('toggleFlag', toggleOn, toggleOff);\r\n\r\n            // Register a pair of handlers on keyup/keydown to highlight a field\r\n            // while the associated Combo is activated (held down)\r\n        \tbindings.registerHandler('highlightInput', 'keydown', function() {\r\n        \t\tdocument.getElementById('test').style['background-color'] = 'yellow';\r\n        \t});\r\n        \tbindings.registerHandler('highlightInput', 'keyup', function() {\r\n        \t\tdocument.getElementById('test').style['background-color'] = 'white';\r\n        \t});\r\n        })();\r\n    </script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## TODO\r\n\r\nI feel pretty happy with the current state of this, but as always, bugs and corner cases are sure to arise. A couple things I'd like to do:\r\n\r\n- Comprehensive documentation (good progress already)\r\n- Discover additional use cases that aren't covered as well as they could be with Keys\r\n\r\n## License\r\n\r\nThis work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}